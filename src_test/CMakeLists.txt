#
# This file is part of a C++ interface to the Radiative Transfer for Energetics (RTE)
#
include_directories(${INCLUDE_DIRS} "../include" "../include_test")

# retrieve the git hash from the current commit
find_package(Git)
if(GIT_EXECUTABLE)
  exec_program(git ${CMAKE_CURRENT_SOURCE_DIR} ARGS "describe --dirty" OUTPUT_VARIABLE GITHASH RETURN_VALUE GITRETURN)
  if(NOT GITRETURN MATCHES 0)
    set(GITHASH "not available")
  endif()
else()
  set(GITHASH "not available")
endif()

message(STATUS "Git hash " ${GITHASH})

# send a precompiler statement replacing the git hash
add_definitions(-DGITHASH="${GITHASH}")

if(USECUDA)
  add_executable(test_rte_rrtmgp_gpu Radiation_solver.cu test_rte_rrtmgp.cu)
  target_link_libraries(test_rte_rrtmgp_gpu rte_rrtmgp rte_rrtmgp_cuda rte_rrtmgp_raytracer_cuda curand ${LIBS} m)
  
  add_executable(test_rte_rrtmgp_3d_gpu Radiation_solver.cu test_rte_rrtmgp_3d.cu)
  target_link_libraries(test_rte_rrtmgp_3d_gpu rte_rrtmgp rte_rrtmgp_cuda rte_rrtmgp_raytracer_cuda curand ${LIBS} m)
  
  add_executable(raytracer_io raytracer_3d_io.cu)
  target_link_libraries(raytracer_io rte_rrtmgp_raytracer_cuda curand ${LIBS} m)
  
  add_executable(raytracer_bw raytracer_3d_bw.cu)
  target_link_libraries(raytracer_bw rte_rrtmgp_raytracer_cuda curand ${LIBS} m)
endif()

add_executable(test_rte_rrtmgp Radiation_solver.cpp test_rte_rrtmgp.cpp)
target_link_libraries(test_rte_rrtmgp rte_rrtmgp ${LIBS} m)
